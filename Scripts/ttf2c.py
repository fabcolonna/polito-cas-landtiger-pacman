#!/usr/bin/env python3

from PIL import Image, ImageFont, ImageDraw
from argparse import ArgumentParser as ArgParser

def dump_to_c(ttf_file, out_file, size):
    try:
        font = ImageFont.truetype(ttf_file, size)
    except Exception as e:
        raise ValueError(f"Error loading font: {e}")

    # Defining the charset, i.e. all the printable ASCII characters (32 to 126)
    charset = ''.join([chr(i) for i in range(32, 127)])

    char_h = 0
    char_widths = []
    for char in charset:
        bbox = font.getbbox(char)
        char_widths.append(bbox[2] - bbox[0])
        char_h = max(char_h, bbox[3] - bbox[1])

    with open(out_file, "w") as out:
        arr_name = ttf_file.split('.')[0].replace('.', '_')
        incl_guard = f"__FONT_{arr_name.upper()}_{size}_H"

        out.write(
f"""// This font array was auto-generated by ttf2c.py. Do not edit it manually.
#ifndef {incl_guard}
#define {incl_guard}

#include "utils.h"
#include "glcd_types.h"

// Font size: {size} px

// clang-format off

const u32 Font_{arr_name}{size}Data[] = {{\n""")

        for char in charset:
            img = Image.new("1", (max(char_widths), char_h), color=0) # Mode "1" for 1-bit pixels
            draw = ImageDraw.Draw(img)
            draw.text((0, 0), char, font=font, fill=1)

            # Extract pixel data
            out.write("\t")
            for y in range(char_h):
                row = 0
                for x in range(max(char_widths)):
                    row = (row << 1) | img.getpixel((x, y))
                out.write(f"0x{row:08X}, ")
            out.write(f"/* {char} */\n")

        out.write(
f"""}};

const u16 Font_{arr_name}{size}CharWidths[] = {{
    {', '.join(map(str, char_widths))}
}}; 
        
// clang-format on

const LCD_Font Font_{arr_name}{size} = {{
    .data = Font_{arr_name}{size}Data,
    .data_size = {len(charset)},
    .char_widths = Font_{arr_name}{size}CharWidths,
    .max_char_width = {max(char_widths)},
    .char_height = {char_h},
}};

#endif""")

#? Main Program
parser = ArgParser(prog='ttf2c', description='Converts a TTF BMP font into a C-style array, containing chars in ASCII order')
parser.add_argument('ttf_file', type=str, help='TTF font file to convert')
parser.add_argument('out_file', type=str, help='Output file in which to write the C-style array')
parser.add_argument('-s', '--size', type=int, help='Font size, up to 32', required=True)

args = parser.parse_args()

if args.size > 32 or args.size < 1:
    raise ValueError("Font size must be in range (1, 32), inclusive")

dump_to_c(args.ttf_file, args.out_file, args.size)